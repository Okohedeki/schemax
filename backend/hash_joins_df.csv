,text,total_num_physical_reads,min_rows,max_rows,query_hash,query_plan_hash,execution_count,ExecutionTime,QueryText,QueryPlan
0,"SELECT 
  name AS FunctionName,
  create_date AS CreationDate,
  modify_date AS LastModifiedDate,
  OBJECT_DEFINITION(object_id) AS FunctionText
    FROM 
  sys.objects
    WHERE 
  type IN ('FN', 'IF', 'TF')  -- 'FN' for scalar functions, 'IF' for inline table-valued functions, 'TF' for multi-statement table-valued functions
ORDER BY 
  name;
",1,3,3,b'\xb2mq\x9b\xfe\x98^;',b'\xc5\x17W\x16\x13W\xedD',1,,,
1,"SELECT 
  name AS ProcedureName,
  create_date AS CreationDate,
  modify_date AS LastModifiedDate,
  OBJECT_DEFINITION(object_id) AS ProcedureText FROM 
  sys.procedures
    ORDER BY 
  name;
",0,7,7,b'W\xf6\x10\x11\x8d[\xf1!',b'\xc5\x17W\x16\x13W\xedD',1,,,
2,"SELECT 
  name AS VIEW_NAME,
  OBJECT_DEFINITION(object_id) AS ViewDefinition
  FROM 
  sys.views;
",1,16,16,b'7U\x1f<c\x8d\x18\xf2',b'c\xfe\xc5\xb8\xed\xe9Q\xbb',1,,,
3,"select table_view,
    object_type, 
    constraint_type,
    constraint_name,
    details
from (
    select schema_name(t.schema_id) + '.' + t.[name] as table_view, 
        case when t.[type] = 'U' then 'Table'
            when t.[type] = 'V' then 'View'
            end as [object_type],
        case when c.[type] = 'PK' then 'Primary key'
            when c.[type] = 'UQ' then 'Unique constraint'
            when i.[type] = 1 then 'Unique clustered index'
            when i.type = 2 then 'Unique index'
            end as constraint_type, 
        isnull(c.[name], i.[name]) as constraint_name,
        substring(column_names, 1, len(column_names)-1) as [details]
    from sys.objects t
        left outer join sys.indexes i
            on t.object_id = i.object_id
        left outer join sys.key_constraints c
            on i.object_id = c.parent_object_id 
            and i.index_id = c.unique_index_id
      cross apply (select col.[name] + ', '
                        from sys.index_columns ic
                            inner join sys.columns col
                                on ic.object_id = col.object_id
                                and ic.column_id = col.column_id
                        where ic.object_id = t.object_id
                            and ic.index_id = i.index_id
                                order by col.column_id
                                for xml path ('') ) D (column_names)
    where is_unique = 1
    and t.is_ms_shipped <> 1
    union all 
    select schema_name(fk_tab.schema_id) + '.' + fk_tab.name as foreign_table,
        'Table',
        'Foreign key',
        fk.name as fk_constraint_name,
        schema_name(pk_tab.schema_id) + '.' + pk_tab.name
    from sys.foreign_keys fk
        inner join sys.tables fk_tab
            on fk_tab.object_id = fk.parent_object_id
        inner join sys.tables pk_tab
            on pk_tab.object_id = fk.referenced_object_id
        inner join sys.foreign_key_columns fk_cols
            on fk_cols.constraint_object_id = fk.object_id
    union all
    select schema_name(t.schema_id) + '.' + t.[name],
        'Table',
        'Check constraint',
        con.[name] as constraint_name,
        con.[definition]
    from sys.check_constraints con
        left outer join sys.objects t
            on con.parent_object_id = t.object_id
        left outer join sys.all_columns col
            on con.parent_column_id = col.column_id
            and con.parent_object_id = col.object_id
    union all
    select schema_name(t.schema_id) + '.' + t.[name],
        'Table',
        'Default constraint',
        con.[name],
        col.[name] + ' = ' + con.[definition]
    from sys.default_constraints con
        left outer join sys.objects t
            on con.parent_object_id = t.object_id
        left outer join sys.all_columns col
            on con.parent_column_id = col.column_id
            and con.parent_object_id = col.object_id) a
order by table_view, constraint_type, constraint_name
",13,43,43,b'\x16mj\x94\x9b\xf4\x0be',b'|\xe7H7\t_\xc4\xd2',1,,,
4,SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE',14,13,13,b'\x980\xbd\x16J\xbfh\xc4',b'\xd0\xae\x1d\xed\xb2\x1a\x87\x02',1,,,
5,"
create procedure sys.sp_datatype_info_100
(
    @data_type int = 0,
    @ODBCVer tinyint = 2
)
as
    declare @mintype int
    declare @maxtype int

    set @ODBCVer = isnull(@ODBCVer, 2)
    if @ODBCVer < 3 -- includes ODBC 1.0 as well
        set @ODBCVer = 2
    else
        set @ODBCVer = 3

    if @data_type = 0
    begin
        select @mintype = -32768
        select @maxtype = 32767
    end
    else
    begin
        select @mintype = @data_type
        select @maxtype = @data_type
    end

    select
        TYPE_NAME           = v.TYPE_NAME,
        DATA_TYPE           = v.DATA_TYPE,
        PRECISION           = v.PRECISION,
        LITERAL_PREFIX      = v.LITERAL_PREFIX,
        LITERAL_SUFFIX      = v.LITERAL_SUFFIX,
        CREATE_PARAMS       = v.CREATE_PARAMS,
        NULLABLE            = v.NULLABLE,
        CASE_SENSITIVE      = v.CASE_SENSITIVE,
        SEARCHABLE          = v.SEARCHABLE,
        UNSIGNED_ATTRIBUTE  = v.UNSIGNED_ATTRIBUTE,
        MONEY               = v.MONEY,
        AUTO_INCREMENT      = v.AUTO_INCREMENT,
        LOCAL_TYPE_NAME     = v.LOCAL_TYPE_NAME,
        MINIMUM_SCALE       = v.MINIMUM_SCALE,
        MAXIMUM_SCALE       = v.MAXIMUM_SCALE,
        SQL_DATA_TYPE       = v.SQL_DATA_TYPE,
        SQL_DATETIME_SUB    = v.SQL_DATETIME_SUB,
        NUM_PREC_RADIX      = v.NUM_PREC_RADIX,
        INTERVAL_PRECISION  = v.INTERVAL_PRECISION,
        USERTYPE            = v.USERTYPE

    from
        sys.spt_datatype_info_view v

    where
        v.DATA_TYPE between @mintype and @maxtype and
        v.ODBCVer = @ODBCVer

    order by 2, 12, 11, 20
",1,1,3,b'L\xe7\xab\x99\x11\xf5\xc4 ',b'\x98\xa6 \xf1\x16$25',4,,,
6,"if exists(select * from sys.server_event_sessions where name='telemetry_xevents')
	drop event session telemetry_xevents on server

create event session telemetry_xevents on server
 ADD EVENT [sqlserver].[error_reported]
(
WHERE severity >= 16
or (error_number = 18456
    or error_number = 17803 or error_number = 701 or error_number = 802 or error_number = 8645 or error_number = 8651
    or error_number = 8657 or error_number = 8902 or error_number = 41354 or error_number = 41355 or error_number = 41367
    or error_number = 41384 or error_number = 41336 or error_number = 41309 or error_number = 41312 or error_number = 41313
    or error_number = 33065 or error_number = 33066)
),

 ADD EVENT [sqlserver].[missing_column_statistics],

 ADD EVENT [sqlserver].[missing_join_predicate],

 ADD EVENT [sqlserver].[server_memory_change],

 ADD EVENT [sqlserver].[stretch_database_disable_completed],

 ADD EVENT [sqlserver].[stretch_database_enable_completed],

 ADD EVENT [sqlserver].[stretch_database_reauthorize_completed],

 ADD EVENT [sqlserver].[stretch_index_reconciliation_codegen_completed],

 ADD EVENT [sqlserver].[stretch_remote_column_execution_completed],

 ADD EVENT [sqlserver].[stretch_remote_column_reconciliation_codegen_completed],

 ADD EVENT [sqlserver].[stretch_remote_index_execution_completed],

 ADD EVENT [sqlserver].[stretch_table_codegen_completed],

 ADD EVENT [sqlserver].[stretch_table_alter_ddl],

 ADD EVENT [sqlserver].[stretch_table_create_ddl],

 ADD EVENT [sqlserver].[stretch_table_predicate_not_specified],

 ADD EVENT [sqlserver].[stretch_table_predicate_specified],

 ADD EVENT [sqlserver].[stretch_table_remote_creation_completed],

 ADD EVENT [sqlserver].[stretch_table_row_migration_results_event],

 ADD EVENT [sqlserver].[stretch_table_row_unmigration_results_event],

 ADD EVENT [sqlserver].[stretch_table_data_reconciliation_results_event],

 ADD EVENT [sqlserver].[stretch_table_unprovision_completed],

 ADD EVENT [sqlserver].[stretch_table_validation_error],

 ADD EVENT [sqlserver].[stretch_table_hinted_admin_update_event],

 ADD EVENT [sqlserver].[stretch_table_hinted_admin_delete_event],

 ADD EVENT [sqlserver].[stretch_table_query_error],

 ADD EVENT [sqlserver].[stretch_remote_error],

 ADD EVENT [sqlserver].[stretch_query_telemetry],

 ADD EVENT [sqlserver].[temporal_ddl_system_versioning],

 ADD EVENT [sqlserver].[temporal_dml_transaction_fail],

 ADD EVENT [sqlserver].[temporal_ddl_period_add],

 ADD EVENT [sqlserver].[temporal_ddl_period_drop],

 ADD EVENT [sqlserver].[temporal_ddl_schema_check_fail],

 ADD EVENT [sqlserver].[data_masking_ddl_column_definition],

 ADD EVENT [sqlserver].[data_masking_traffic],

 ADD EVENT [sqlserver].[data_masking_traffic_masked_only],

 ADD EVENT [sqlserver].[data_classification_ddl_column_definition],

 ADD EVENT [sqlserver].[data_classification_traffic],

 ADD EVENT [sqlserver].[data_classification_auditing_traffic],

 ADD EVENT [sqlserver].[feature_restriction_ddl],

 ADD EVENT [sqlserver].[feature_restriction_usage],

 ADD EVENT [sqlserver].[always_encrypted_query_count],

 ADD EVENT [sqlserver].[rls_query_count],

 ADD EVENT [sqlserver].[auto_stats],

 ADD EVENT [sqlserver].[database_cmptlevel_change],

 ADD EVENT [sqlserver].[database_created],

 ADD EVENT [sqlserver].[database_dropped],

 ADD EVENT [sqlserver].[reason_many_foreign_keys_operator_not_used],

 ADD EVENT [sqlserver].[interleaved_exec_status],

 ADD EVENT [sqlserver].[table_variable_deferred_compilation],

 ADD EVENT [sqlserver].[graph_match_query_compiled],

 ADD EVENT [sqlserver].[approximate_count_distinct_query_compiled],

 ADD EVENT [sqlserver].[login_protocol_count],

 ADD EVENT [sqlserver].[column_store_index_build_low_memory],

 ADD EVENT [sqlserver].[column_store_index_build_throttle],

 ADD EVENT [sqlserver].[columnstore_delete_buffer_flush_failed],

 ADD EVENT [sqlserver].[columnstore_delta_rowgroup_closed],

 ADD EVENT [sqlserver].[columnstore_index_reorg_failed],

 ADD EVENT [sqlserver].[columnstore_log_exception],

 ADD EVENT [sqlserver].[columnstore_rowgroup_merge_failed],

 ADD EVENT [sqlserver].[columnstore_tuple_mover_delete_buffer_truncate_timed_out],

 ADD EVENT [sqlserver].[columnstore_tuple_mover_end_compress],

 ADD EVENT [sqlserver].[query_memory_grant_blocking],

 ADD EVENT [sqlserver].[natively_compiled_module_inefficiency_detected],

 ADD EVENT [sqlserver].[natively_compiled_proc_slow_parameter_passing],

 ADD EVENT [sqlserver].[xtp_alter_table],

 ADD EVENT [sqlserver].[xtp_db_delete_only_mode_updatedhktrimlsn],

 ADD EVENT [sqlserver].[xtp_stgif_container_added],

 ADD EVENT [sqlserver].[xtp_stgif_container_deleted],

 ADD EVENT [xtpcompile].[cl_duration],

 ADD EVENT [xtpengine].[xtp_physical_db_restarted],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_enter],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_update],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_exit],

 ADD EVENT [xtpengine].[parallel_alter_stats],

 ADD EVENT [xtpengine].[serial_alter_stats],

 ADD EVENT [sqlserver].[json_function_compiled]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[string_escape_compiled]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[window_function_used]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[sequence_function_used]
(
ACTION ([database_id])
),

 ADD EVENT [qds].[query_store_db_diagnostics],

 ADD EVENT [sqlserver].[index_defragmentation],

 ADD EVENT [sqlserver].[create_index_event],

 ADD EVENT [sqlserver].[index_build_error_event],

 ADD EVENT [sqlserver].[alter_column_event],

 ADD EVENT [sqlserver].[cardinality_estimation_version_usage],

 ADD EVENT [sqlserver].[query_optimizer_compatibility_level_hint_usage],

 ADD EVENT [sqlserver].[query_tsql_scalar_udf_inlined],

 ADD EVENT [sqlserver].[tsql_scalar_udf_not_inlineable],

 ADD EVENT [sqlserver].[recovery_checkpoint_stats],

 ADD EVENT [sqlserver].[multistep_execution]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[fulltext_filter_usage],

 ADD EVENT [sqlserver].[tx_commit_abort_stats],

 ADD EVENT [sqlserver].[server_start_stop]
add target package0.ring_buffer
(set occurrence_number = 100)
with
(
	MAX_DISPATCH_LATENCY = 120 SECONDS,
	MAX_MEMORY = 4 MB,
	startup_state = on
)
if not exists (select * from sys.dm_xe_sessions where name = 'telemetry_xevents')
	alter event session telemetry_xevents on server state=start
",0,0,0,b'\x19\x92/\x19n\x11hO',b'\xc9\x919Km\xc1\xcf\x85',4,,,
7,"if exists(select * from sys.server_event_sessions where name='telemetry_xevents')
	drop event session telemetry_xevents on server

create event session telemetry_xevents on server
 ADD EVENT [sqlserver].[error_reported]
(
WHERE severity >= 16
or (error_number = 18456
    or error_number = 17803 or error_number = 701 or error_number = 802 or error_number = 8645 or error_number = 8651
    or error_number = 8657 or error_number = 8902 or error_number = 41354 or error_number = 41355 or error_number = 41367
    or error_number = 41384 or error_number = 41336 or error_number = 41309 or error_number = 41312 or error_number = 41313
    or error_number = 33065 or error_number = 33066)
),

 ADD EVENT [sqlserver].[missing_column_statistics],

 ADD EVENT [sqlserver].[missing_join_predicate],

 ADD EVENT [sqlserver].[server_memory_change],

 ADD EVENT [sqlserver].[stretch_database_disable_completed],

 ADD EVENT [sqlserver].[stretch_database_enable_completed],

 ADD EVENT [sqlserver].[stretch_database_reauthorize_completed],

 ADD EVENT [sqlserver].[stretch_index_reconciliation_codegen_completed],

 ADD EVENT [sqlserver].[stretch_remote_column_execution_completed],

 ADD EVENT [sqlserver].[stretch_remote_column_reconciliation_codegen_completed],

 ADD EVENT [sqlserver].[stretch_remote_index_execution_completed],

 ADD EVENT [sqlserver].[stretch_table_codegen_completed],

 ADD EVENT [sqlserver].[stretch_table_alter_ddl],

 ADD EVENT [sqlserver].[stretch_table_create_ddl],

 ADD EVENT [sqlserver].[stretch_table_predicate_not_specified],

 ADD EVENT [sqlserver].[stretch_table_predicate_specified],

 ADD EVENT [sqlserver].[stretch_table_remote_creation_completed],

 ADD EVENT [sqlserver].[stretch_table_row_migration_results_event],

 ADD EVENT [sqlserver].[stretch_table_row_unmigration_results_event],

 ADD EVENT [sqlserver].[stretch_table_data_reconciliation_results_event],

 ADD EVENT [sqlserver].[stretch_table_unprovision_completed],

 ADD EVENT [sqlserver].[stretch_table_validation_error],

 ADD EVENT [sqlserver].[stretch_table_hinted_admin_update_event],

 ADD EVENT [sqlserver].[stretch_table_hinted_admin_delete_event],

 ADD EVENT [sqlserver].[stretch_table_query_error],

 ADD EVENT [sqlserver].[stretch_remote_error],

 ADD EVENT [sqlserver].[stretch_query_telemetry],

 ADD EVENT [sqlserver].[temporal_ddl_system_versioning],

 ADD EVENT [sqlserver].[temporal_dml_transaction_fail],

 ADD EVENT [sqlserver].[temporal_ddl_period_add],

 ADD EVENT [sqlserver].[temporal_ddl_period_drop],

 ADD EVENT [sqlserver].[temporal_ddl_schema_check_fail],

 ADD EVENT [sqlserver].[data_masking_ddl_column_definition],

 ADD EVENT [sqlserver].[data_masking_traffic],

 ADD EVENT [sqlserver].[data_masking_traffic_masked_only],

 ADD EVENT [sqlserver].[data_classification_ddl_column_definition],

 ADD EVENT [sqlserver].[data_classification_traffic],

 ADD EVENT [sqlserver].[data_classification_auditing_traffic],

 ADD EVENT [sqlserver].[feature_restriction_ddl],

 ADD EVENT [sqlserver].[feature_restriction_usage],

 ADD EVENT [sqlserver].[always_encrypted_query_count],

 ADD EVENT [sqlserver].[rls_query_count],

 ADD EVENT [sqlserver].[auto_stats],

 ADD EVENT [sqlserver].[database_cmptlevel_change],

 ADD EVENT [sqlserver].[database_created],

 ADD EVENT [sqlserver].[database_dropped],

 ADD EVENT [sqlserver].[reason_many_foreign_keys_operator_not_used],

 ADD EVENT [sqlserver].[interleaved_exec_status],

 ADD EVENT [sqlserver].[table_variable_deferred_compilation],

 ADD EVENT [sqlserver].[graph_match_query_compiled],

 ADD EVENT [sqlserver].[approximate_count_distinct_query_compiled],

 ADD EVENT [sqlserver].[login_protocol_count],

 ADD EVENT [sqlserver].[column_store_index_build_low_memory],

 ADD EVENT [sqlserver].[column_store_index_build_throttle],

 ADD EVENT [sqlserver].[columnstore_delete_buffer_flush_failed],

 ADD EVENT [sqlserver].[columnstore_delta_rowgroup_closed],

 ADD EVENT [sqlserver].[columnstore_index_reorg_failed],

 ADD EVENT [sqlserver].[columnstore_log_exception],

 ADD EVENT [sqlserver].[columnstore_rowgroup_merge_failed],

 ADD EVENT [sqlserver].[columnstore_tuple_mover_delete_buffer_truncate_timed_out],

 ADD EVENT [sqlserver].[columnstore_tuple_mover_end_compress],

 ADD EVENT [sqlserver].[query_memory_grant_blocking],

 ADD EVENT [sqlserver].[natively_compiled_module_inefficiency_detected],

 ADD EVENT [sqlserver].[natively_compiled_proc_slow_parameter_passing],

 ADD EVENT [sqlserver].[xtp_alter_table],

 ADD EVENT [sqlserver].[xtp_db_delete_only_mode_updatedhktrimlsn],

 ADD EVENT [sqlserver].[xtp_stgif_container_added],

 ADD EVENT [sqlserver].[xtp_stgif_container_deleted],

 ADD EVENT [xtpcompile].[cl_duration],

 ADD EVENT [xtpengine].[xtp_physical_db_restarted],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_enter],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_update],

 ADD EVENT [xtpengine].[xtp_db_delete_only_mode_exit],

 ADD EVENT [xtpengine].[parallel_alter_stats],

 ADD EVENT [xtpengine].[serial_alter_stats],

 ADD EVENT [sqlserver].[json_function_compiled]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[string_escape_compiled]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[window_function_used]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[sequence_function_used]
(
ACTION ([database_id])
),

 ADD EVENT [qds].[query_store_db_diagnostics],

 ADD EVENT [sqlserver].[index_defragmentation],

 ADD EVENT [sqlserver].[create_index_event],

 ADD EVENT [sqlserver].[index_build_error_event],

 ADD EVENT [sqlserver].[alter_column_event],

 ADD EVENT [sqlserver].[cardinality_estimation_version_usage],

 ADD EVENT [sqlserver].[query_optimizer_compatibility_level_hint_usage],

 ADD EVENT [sqlserver].[query_tsql_scalar_udf_inlined],

 ADD EVENT [sqlserver].[tsql_scalar_udf_not_inlineable],

 ADD EVENT [sqlserver].[recovery_checkpoint_stats],

 ADD EVENT [sqlserver].[multistep_execution]
(
ACTION ([database_id])
),

 ADD EVENT [sqlserver].[fulltext_filter_usage],

 ADD EVENT [sqlserver].[tx_commit_abort_stats],

 ADD EVENT [sqlserver].[server_start_stop]
add target package0.ring_buffer
(set occurrence_number = 100)
with
(
	MAX_DISPATCH_LATENCY = 120 SECONDS,
	MAX_MEMORY = 4 MB,
	startup_state = on
)
if not exists (select * from sys.dm_xe_sessions where name = 'telemetry_xevents')
	alter event session telemetry_xevents on server state=start
",0,0,0,b'n\xfb\xa4k-\x06\x02\x9c',b'\xad\xcbN\xe0\xaa\xda\x10A',4,,,
8,"SELECT target_data
									FROM sys.dm_xe_session_targets xet WITH(nolock)
									JOIN sys.dm_xe_sessions xes WITH(nolock)
									ON xes.address = xet.event_session_address
									WHERE xes.name = 'telemetry_xevents'
									AND xet.target_name = 'ring_buffer'",2,1,1,b'R\xb3\xb6\xce\xdeo\xc5z',b'\x99\xe4 9\xe9(\xe3\xd9',26,,,
9,"
           
       DECLARE @msticks bigint, @mstickstime datetime, @LastHour datetime
                SELECT @mstickstime = GETDATE(), @msticks = ms_ticks from sys.dm_os_sys_info
                SELECT @LastHour = DATEADD(HOUR, -1, @mstickstime);
                
                WITH Quartiles AS (
                SELECT DISTINCT       
                    CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,
                       CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],         
                       PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS MedianSQLCPU
                           ,           
                       PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS Q3SQLCPU
                     ,           
                       PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS Q1SQLCPU
                  FROM (
                    SELECT timestamp, CONVERT (xml, record) AS 'record' 
                    FROM sys.dm_os_ring_buffers 
                    WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'
                      AND record LIKE '%<SystemHealth>%'
                            ) AS t
                     WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)
                     AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)
              ),
              SimpleStats AS (
                SELECT         
                    CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,
                       CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],  
                    MAX(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MaxSQLCPU], 
                       MIN(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MinSQLCPU], 
                       AVG(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [AvgSQLCPU]          
                  FROM (
                    SELECT timestamp, CONVERT (xml, record) AS 'record' 
                    FROM sys.dm_os_ring_buffers 
                    WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'
                      AND record LIKE '%<SystemHealth>%'
                            ) AS t
              WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)
                     AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)
              GROUP BY 
                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) ,
                     CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) 
              )
              SELECT 
                     ss.EventDate AS EventDate,
                     ss.EventTime AS EventTime,
                     ss.MaxSQLCPU,
                     ss.MinSQLCPU,
                     ss.AvgSQLCPU,
                     q.MedianSQLCPU,
                     q.Q1SQLCPU,
                     q.Q3SQLCPU
              FROM SimpleStats ss
                     INNER JOIN Quartiles q
                           ON q.EventDate = ss.EventDate
                           AND q.EventTime = ss.EventTime
     ",1,1,1,b'k\x19\x0bZ&\xbbo\xdb',b'\xbcA\xc3sz\xf6c\xea',3,,,
10,"
           
       DECLARE @msticks bigint, @mstickstime datetime, @LastHour datetime
                SELECT @mstickstime = GETDATE(), @msticks = ms_ticks from sys.dm_os_sys_info
                SELECT @LastHour = DATEADD(HOUR, -1, @mstickstime);
                
                WITH Quartiles AS (
                SELECT DISTINCT       
                    CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,
                       CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],         
                       PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS MedianSQLCPU
                           ,           
                       PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS Q3SQLCPU
                     ,           
                       PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
                           )
                           OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),
                                  CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)
                           ) AS Q1SQLCPU
                  FROM (
                    SELECT timestamp, CONVERT (xml, record) AS 'record' 
                    FROM sys.dm_os_ring_buffers 
                    WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'
                      AND record LIKE '%<SystemHealth>%'
                            ) AS t
                     WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)
                     AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)
              ),
              SimpleStats AS (
                SELECT         
                    CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,
                       CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],  
                    MAX(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MaxSQLCPU], 
                       MIN(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MinSQLCPU], 
                       AVG(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [AvgSQLCPU]          
                  FROM (
                    SELECT timestamp, CONVERT (xml, record) AS 'record' 
                    FROM sys.dm_os_ring_buffers 
                    WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'
                      AND record LIKE '%<SystemHealth>%'
                            ) AS t
              WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)
                     AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)
              GROUP BY 
                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) ,
                     CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) 
              )
              SELECT 
                     ss.EventDate AS EventDate,
                     ss.EventTime AS EventTime,
                     ss.MaxSQLCPU,
                     ss.MinSQLCPU,
                     ss.AvgSQLCPU,
                     q.MedianSQLCPU,
                     q.Q1SQLCPU,
                     q.Q3SQLCPU
              FROM SimpleStats ss
                     INNER JOIN Quartiles q
                           ON q.EventDate = ss.EventDate
                           AND q.EventTime = ss.EventTime
     ",0,0,1,b'n\x87\xac\xc6\xe9F\x7fw',b'\xb5\xb4\xf0]\x85\xb06`',3,,,
11,"CREATE PROC sys.sp_flush_commit_table_on_demand (@numrows as BIGINT = NULL, @deleted_rows BIGINT = NULL OUTPUT, @date_cleanedup DATETIME = NULL OUTPUT, @cleanup_ts BIGINT = NULL OUTPUT) AS
BEGIN

	IF (is_member('db_owner') = 0)
	BEGIN
		raiserror(21050,0,1)
		return 1
	END


	IF (@numrows<=0)
	BEGIN
		raiserror(23100,0,1)
		return 1
	END


	SET DEADLOCK_PRIORITY LOW
	
	IF  EXISTS (SELECT * FROM sys.change_tracking_databases where database_id = DB_ID())
	BEGIN
		DECLARE @batch_size INT
		IF (@numrows IS NULL or @numrows >= 4999)
			SET @batch_size = 4999
		ELSE
			SET @batch_size = @numrows

		-- checking for change tracking side table watermark
		DECLARE @deleted_rowcount INT
		SET		@cleanup_ts = change_tracking_hardened_cleanup_version ()
		RAISERROR(22866,0,1,35502,@cleanup_ts)

		-- checking for safe cleanup watermark
		DECLARE @cleanup_version BIGINT
		set @cleanup_version = safe_cleanup_version ()
		RAISERROR(22866,0,1,35503,@cleanup_version)

		IF @cleanup_ts > @cleanup_version
			SET @cleanup_ts = @cleanup_version

		SELECT @deleted_rowcount = 0, @deleted_rows = 0

		WHILE (1=1)
		BEGIN
			DELETE TOP(@batch_size) sys.syscommittab WHERE commit_ts < @cleanup_ts
			SELECT @deleted_rowcount = @@ROWCOUNT
			SELECT @deleted_rows += @deleted_rowcount
			SELECT @numrows -= @batch_size
			IF ((@numrows IS NOT NULL AND @numrows <= 0 ) OR @deleted_rowcount < @batch_size)
				BREAK;
		END

		select @date_cleanedup = min(commit_time) from sys.syscommittab where commit_ts = (select min(commit_ts) from sys.syscommittab)
		IF (@date_cleanedup is null)
			SET @date_cleanedup = GETUTCDATE()
		
	END
	ELSE IF EXISTS (SELECT * FROM sys.databases WHERE DB_NAME() not in ('master', 'tempdb', 'model', 'msdb', 'mssqlsystemresource'))
		TRUNCATE TABLE sys.syscommittab

END
",0,0,0,b'\x95LKk\xcb\xea\xad\xc5',b'\xbb\x81Y\xdf\xf0V\x00\xbf',4,,,
12,"CREATE PROC sys.sp_flush_commit_table_on_demand (@numrows as BIGINT = NULL, @deleted_rows BIGINT = NULL OUTPUT, @date_cleanedup DATETIME = NULL OUTPUT, @cleanup_ts BIGINT = NULL OUTPUT) AS
BEGIN

	IF (is_member('db_owner') = 0)
	BEGIN
		raiserror(21050,0,1)
		return 1
	END


	IF (@numrows<=0)
	BEGIN
		raiserror(23100,0,1)
		return 1
	END


	SET DEADLOCK_PRIORITY LOW
	
	IF  EXISTS (SELECT * FROM sys.change_tracking_databases where database_id = DB_ID())
	BEGIN
		DECLARE @batch_size INT
		IF (@numrows IS NULL or @numrows >= 4999)
			SET @batch_size = 4999
		ELSE
			SET @batch_size = @numrows

		-- checking for change tracking side table watermark
		DECLARE @deleted_rowcount INT
		SET		@cleanup_ts = change_tracking_hardened_cleanup_version ()
		RAISERROR(22866,0,1,35502,@cleanup_ts)

		-- checking for safe cleanup watermark
		DECLARE @cleanup_version BIGINT
		set @cleanup_version = safe_cleanup_version ()
		RAISERROR(22866,0,1,35503,@cleanup_version)

		IF @cleanup_ts > @cleanup_version
			SET @cleanup_ts = @cleanup_version

		SELECT @deleted_rowcount = 0, @deleted_rows = 0

		WHILE (1=1)
		BEGIN
			DELETE TOP(@batch_size) sys.syscommittab WHERE commit_ts < @cleanup_ts
			SELECT @deleted_rowcount = @@ROWCOUNT
			SELECT @deleted_rows += @deleted_rowcount
			SELECT @numrows -= @batch_size
			IF ((@numrows IS NOT NULL AND @numrows <= 0 ) OR @deleted_rowcount < @batch_size)
				BREAK;
		END

		select @date_cleanedup = min(commit_time) from sys.syscommittab where commit_ts = (select min(commit_ts) from sys.syscommittab)
		IF (@date_cleanedup is null)
			SET @date_cleanedup = GETUTCDATE()
		
	END
	ELSE IF EXISTS (SELECT * FROM sys.databases WHERE DB_NAME() not in ('master', 'tempdb', 'model', 'msdb', 'mssqlsystemresource'))
		TRUNCATE TABLE sys.syscommittab

END
",0,0,0,"b'\x8a\xa7*""\xc8\t4\x97'",b'\xee\xeb\xd2{\xb8L\xd7\xaa',4,,,
13,"SELECT  TOP 30 d.[name]
FROM    sys.databases d WITH(nolock)
	   INNER JOIN sys.master_files mf WITH(nolock)
			  ON mf.database_id = d.database_id 
	   LEFT OUTER JOIN sys.database_mirroring dm WITH(nolock)
			  ON dm.database_id = d.database_id
	   LEFT OUTER JOIN sys.dm_hadr_database_replica_states hadr WITH(nolock)
			  ON hadr.[database_id] = d.[database_id]
WHERE d.[state] NOT BETWEEN 1 AND 6 -- online only
AND d.[user_access] NOT IN (1, 2) -- multi user
AND d.[source_database_id] IS NULL -- not snapshot
AND d.[name] NOT IN ('master', 'tempdb', 'model', 'msdb') -- not system
AND ISNULL(dm.[mirroring_role], 1) = 1 -- either principal or not mirrored
AND d.[is_in_standby] = 0 -- not standby
AND DATABASEPROPERTYEX(d.[name], 'Collation') IS NOT NULL -- started
AND ISNULL(hadr.[database_state], 0) = 0 -- online in HADR
GROUP BY d.[name] 
ORDER BY SUM(mf.size) DESC -- sampling using size
",0,0,0,b'\xdf\x7f&\xcd\xda\x1c\x98\xc3',b'\xb0\xc1iW:\xbb\x1e\xe2',1,,,
14,"
    SELECT  mf.database_id, db.is_accelerated_database_recovery_on, mf.size as 'Data Size'
	,mf_logs.size as 'Log Size', mf.size * 8/1024 'Data Size (MB)',
	mf_logs.size * 8/1024.0 'Log Size (MB)',
	pvs.persistent_version_store_size_kb,
	pvs.online_index_version_store_size_kb, pvs.current_aborted_transaction_count, pvs.pvs_off_row_page_skipped_low_water_mark,
	pvs.pvs_off_row_page_skipped_min_useful_xts, pvs.pvs_off_row_page_skipped_oldest_active_xdesid
	FROM sys.master_files mf
	LEFT JOIN sys.master_files mf_logs
	ON mf_logs.database_id = mf.database_id
	AND mf_logs.type_desc = 'LOG'
	JOIN sys.dm_tran_persistent_version_store_stats pvs ON mf.database_id = pvs.database_id
	JOIN sys.databases db ON mf.database_id = db.database_id
	WHERE mf.type_desc = 'ROWS';
    ",0,4,4,b't%s;\x98\x9c\x02p',b'\xbfV+\x91\x114G\x86',1,,,
15,"
    SELECT 
    CASE 
        WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx'
        WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa'
        ELSE NULL 
    END AS LoadedModules,
    COUNT(1) AS ModuleCount
        FROM sys.dm_os_loaded_modules WITH (NOLOCK)
        WHERE name like  '%msdtcprx.dll%' 
    OR name like  '%sqljdbc_xa.dll%'
        GROUP BY 
    CASE WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx'
        WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa'
        ELSE NULL 
    END;
    ",0,0,0,b'O\xb7\xb8w\x06\xf3\xc8\xbd',b'D\xc8H\x8ax\xd0\xdfX',1,,,
16,"
    SELECT COUNT_BIG(DISTINCT transaction_uow) DTCActiveTransactions
        FROM sys.dm_tran_active_transactions WITH (NOLOCK)
        WHERE name = 'DTC Transaction';
    ",0,1,1,b'\xb2\xc3ZE\xf0/\xccj',b'H\xf2\x1e\xd5\xc0\xbd)\xee',1,,,
17,"
      select 1 IsPolybaseCluster
      where exists (select * from sys.dm_cluster_endpoints)
    ",0,0,0,b'\xe5\x89\xda\xcb\x00\x92\xa7\xf5',b'\xbc\x98L\x80\xfa\xa3vT',1,,,
18,"
      SELECT 
        database_id, 
        is_auto_cleanup_on,
        retention_period,
        retention_period_units_desc,
        retention_period_units
      FROM sys.change_tracking_databases
    ",0,0,0,b'F\x01\xf1\x9b\xdfKYM',b'N\xa0w\xa9\x19\xadH\xdf',1,,,
19,"
      SELECT COUNT_BIG(*) AS NumOfNodes FROM [sys].[dm_hadr_cluster_members] WHERE member_type = 0
    ",1,1,1,b'\xe3\x8a\x92\x84\x1cu\x05\xca',b'\xd4\xa3u@&\xc23\xd3',1,,,
20,"
      SELECT quorum_type_desc FROM [sys].[dm_hadr_cluster]
    ",0,0,0,b'b\xd4\x9f|W#\xb2I',b'\xfc\xc2\n\xab\x10\\\r\x87',1,,,
21,"
      SELECT pr.type PrincipalType,
      pr.default_language_name DefaultLanguageName,
      COUNT_BIG(DISTINCT pr.principal_id) PrincipalCount
      FROM sys.server_principals AS pr   
      GROUP BY  
      pr.type, pr.default_language_name
    ",0,6,6,"b""\xc5N\xf9\x9e'\x8b\xa9L""",b'\x1a\x80s\xb2\xd9\xc9\xeaF',1,,,
22,"
      SELECT COUNT(*) as provider_count, provider FROM sys.servers WITH(nolock) WHERE is_linked=1 GROUP BY provider
    ",0,0,0,"b""\x10\xc7\x9b\x06 h'o""",b'\x01\xbb\xaa\xb2\xf0|\xf6\x81',1,,,
23,"
      SELECT top 1000 
      group_id, replica_id, group_database_id,group_database_id, is_local, is_primary_replica, synchronization_state, is_commit_participant, synchronization_health, database_state, is_suspended
      FROM sys.dm_hadr_database_replica_states WITH(nolock) 
      where group_id in (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,0,0,b'-\xcc\x03\x154\x07\xa6v',b'Z\xb5^\xd8[\xfa\xaf5',1,,,
24,"
      select group_id, listener_id, LEN(ISNULL(dns_name,'')) AS dns_length, is_conformant
      from sys.availability_group_listeners WITH(nolock)
      where group_id in (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,0,0,b'\x8fMi\xe9\xe3\x9bPs',b'\xdc\xa4\xfd}RR\xef\x03',1,,,
25,"
      select count(*) as AgsWithDtcSupportOn
      from sys.availability_groups WITH(nolock) where dtc_support = 1 and group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,1,1,b'\xfc\xeb\x14\xd5\xa4E?4',b'\x0b.@\x0c\x9b\xe1\x0cy',1,,,
26,"
      SELECT 
      host_platform,
      host_distribution,
      host_release,
      host_service_pack_level,
      host_sku,
      os_language_version 
      FROM sys.dm_os_host_info
    ",0,1,1,b'C\xd3\xbd\xb687f\xbc',b'K\x16\x01\xc2\xe8BHf',1,,,
27,"
      SELECT state, current_size_in_kb FROM sys.dm_os_buffer_pool_extension_configuration WITH(nolock)
    ",0,1,1,b'e\xf7\xd4!\xdbC\x8cM',b'\x9a\xea\x1f\x8b-\x08\xf5\xc9',1,,,
28,"

      /*The following query helps to understand how the Microsoft SQL Server Connector for Azure Key Vault (EKM Provider) is being used for those configuring Azure Key Vault for Transparent Data Encryption (TDE), Cell Level Encryption (CLE), and/or Backup encryption.
      The count of cryptographic EKM providers and the version number of SQL Server Connector on the SQL Server instance are collected. For non-Microsoft EKM providers, no specific information other than the count of non-Microsoft providers is being queried.
      Note: 'A16BA7DE-26E0-43C4-871C-4ED750C65597' is the provider guid for the Microsoft SQL Server Connector, and is used only to help identify its use by the instance.*/

      SELECT
      'Other' as ProviderType,
      null as ProviderVersion,
      count_big(*) as ProviderCount
      FROM sys.dm_cryptographic_provider_properties
      WHERE guid != 'A16BA7DE-26E0-43C4-871C-4ED750C65597'
      UNION ALL
      SELECT
      'SQLServerConnector' as ProviderType,
      provider_version as ProviderVersion,
      1 as ProviderCount
      FROM sys.dm_cryptographic_provider_properties
      WHERE guid = 'A16BA7DE-26E0-43C4-871C-4ED750C65597'
      ORDER BY ProviderType, ProviderVersion
    ",0,1,1,b'\xc0\xb0z\xdc\xfa\x91\xb5\xac',b'\x02\xf8\x86\x0b\x8e\xc4\xec\xce',1,,,
29,"
      select language, counter_name, counter_value from sys.dm_external_script_execution_stats
    ",0,0,0,b'\xdf\x02d\xce\xafM\xff\x0c',"b""`'\x97\xd1\xe1WM\x8a""",1,,,
30,"
      SELECT count_big(*) AS external_resource_pools from sys.resource_governor_external_resource_pools WHERE name != 'default'
    ",0,1,1,b'[\x96\xa1\x06O\xd7\xb7-',"b""\x97'\x81\xd7\xa4\x94\xa3\xa4""",1,,,
31,"
      select counter_name, cntr_value from sys.dm_os_performance_counters where object_name like '%External Scripts%'
    ",0,8,8,b'\xd6>@\xf8NN-\x17',b'^\xd9\xcf\x07:\xdb;\x93',1,,,
32,"
      select cntr_value as merge_policy_evaluation
      from sys.dm_os_performance_counters WITH(nolock)
      where
      object_name like '%columnstore%' and
      counter_name ='Total Merge Policy Evaluations' and
      instance_name = '_Total'
    ",0,1,1,b'B+\xce1V\x9a\\\n',b'^\xd9\xcf\x07:\xdb;\x93',1,,,
33,"
      -- SQLXI datapoint - count of db files in XI path
      SELECT COUNT_BIG(name) AS xi_db_file_count
      FROM sys.master_files WITH(nolock)
      WHERE credential_id IS NOT NULL
      AND state = 0
    ",0,1,1,"b""\xde'`U\xe5\xd3q\x85""",b'W\x96\xd3e\xa6\xa6\\\xbf',1,,,
34,"
      SELECT
      total_count,
      rows_touched,
      dependencies_taken,
      dependencies_failed,
      validation_failures
      FROM sys.dm_xtp_transaction_stats WITH(nolock)
    ",0,1,1,b'\x12\x9c\x8f\x83\xc1F\x9f\x1c',b'.\x82v=\xab\xcc\xde\xf7',1,,,
35,"
      SELECT
      ISNULL(sum(allocated_bytes)/1024,0) AS total_memory_allocated_for_system_kb
      FROM sys.dm_xtp_system_memory_consumers WITH(nolock)
    ",1,1,1,b'\xf9\xf8\xeb\x95\x17R\x91\xad',"b""\x92\x0f\xf2'v>u\x8d""",1,,,
36,"
      select 1 as name, -- Temp DB
      case mf.type_desc
      when 'ROWS' then 1
      when 'LOG' then 2
      end as 'type',
      CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,
      CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,
      CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,
      CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,
      CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,
      CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,
      COUNT_BIG(*) as total
      from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf
      where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id = 2 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)
      group by mf.name, mf.type, mf.type_desc

      UNION ALL

      select 2 as name, -- User DBs
      case mf.type_desc
      when 'ROWS' then 1
      when 'LOG' then 2
      end as 'type',
      CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,
      CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,
      CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,
      CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,
      CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,
      CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,
      COUNT_BIG(*) as total
      from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf
      where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id > 4 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)
      group by mf.type, mf.type_desc

      UNION ALL

      select 3 as name, -- System DBs
      case mf.type_desc
      when 'ROWS' then 1
      when 'LOG' then 2
      end as 'type',
      CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,
      CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,
      CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,
      CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,
      CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,
      CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,
      COUNT_BIG(*) as total
      from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf WITH(nolock)
      where fs.database_id = mf.database_id and fs.file_id = mf.file_id and (fs.database_id = 1 OR fs.database_id = 3 OR fs.database_id = 4) and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)
      group by mf.type, mf.type_desc

    ",1,4,4,b'\xd1\xdex\xae\xefo\x0cD',b'\x1e\x96\xb9\xd3\n=%j',1,,,
37,"
      SELECT b1.device_type,
      ISNULL(b1.[type],'NULL') AS backup_type,
      b1.is_copy_only,
      b1.time_bucket,
      b1.compressed_backup_size_bucket,
      b1.compression_percent_bucket,
      b1.backup_throughput_bucket,
      COUNT_BIG(b1.device_type) AS 'count',
      b1.encryption
      FROM
      (
      SELECT
      mf.device_type,
      bset.[type],
      CAST(bset.[is_copy_only] AS INT) AS [is_copy_only],
      CASE
      WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0                    THEN 0
      WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 1 AND 30       THEN 1
      WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 30 AND 60      THEN 2
      WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 1 AND 5        THEN 3
      WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 5 AND 10       THEN 4
      WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 10 AND 30      THEN 5
      WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 30 AND 60      THEN 6
      WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 1 AND 2        THEN 7
      WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 2 AND 6        THEN 8
      WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 6 AND 12       THEN 9
      WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 12 AND 24      THEN 10
      ELSE 99
      END
      AS 'time_bucket',
      CASE
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 0 AND 1          THEN 0
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 1 AND 5          THEN 1
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 5 AND 25         THEN 2
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 25 AND 100       THEN 3
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 100 AND 500      THEN 4
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 500 AND 1000     THEN 5
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 1000 AND 5000    THEN 6
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 5000 AND 10000   THEN 7
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 10000 AND 50000  THEN 8
      WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 50000 AND 100000 THEN 9
      ELSE 99
      END
      AS compressed_backup_size_bucket,
      CASE
      WHEN CAST(((ISNULL(bset.backup_size,0) - ISNULL(bset.compressed_backup_size,0)) /
      CASE WHEN bset.backup_size <= 0 THEN 1
      ELSE ISNULL(bset.backup_size, 1)
      END
      ) * 100  AS FLOAT) = 0.0 THEN 0
      ELSE (CAST(((ISNULL(bset.backup_size,0) - ISNULL(bset.compressed_backup_size,0)) /
      CASE WHEN bset.backup_size <= 0 THEN 1
      ELSE ISNULL(bset.backup_size, 1)
      END
      ) * 100  AS INT)/10) + 1
      END
      AS compression_percent_bucket,
      CASE
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) = 0.0                       THEN 0
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  0 AND 100          THEN 1
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  100 AND 500        THEN 2
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  500 AND 1000       THEN 3
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  1000 AND 5000      THEN 4
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  5000 AND 10000     THEN 5
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  10000 AND 20000    THEN 6
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  20000 AND 30000    THEN 7
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  30000 AND 50000    THEN 8
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  50000 AND 100000   THEN 9
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  100000 AND 500000  THEN 10
      WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  500000 AND 1000000 THEN 11
      ELSE 99
      END
      AS backup_throughput_bucket, -- in KB
      CASE
      WHEN bset.encryptor_type like '%CERTIFICATE%' THEN 1
      WHEN bset.encryptor_type like '%ASYMMETRIC KEY%' THEN 2
      ELSE 0
      END
      AS encryption
      FROM [msdb].[dbo].[backupset] bset WITH (READUNCOMMITTED)
      JOIN [msdb].[dbo].[backupmediafamily]  mf WITH (READUNCOMMITTED) ON  mf.media_set_id = bset.media_set_id
      WHERE
      backup_finish_date <= GETDATE() and backup_finish_date > DATEADD(hh, -24, GETDATE() )
      ) AS b1
      GROUP BY
      b1.device_type,
      b1.[type],
      b1.is_copy_only,
      b1.time_bucket,
      b1.compressed_backup_size_bucket,
      b1.compression_percent_bucket,
      b1.backup_throughput_bucket,
      b1.encryption

    ",1,0,0,b'B\xce\xa1\x86)\x16\x04\n',b's\xa8\xe9@\x88\xc8\x9cJ',1,,,
38,"
      select
      group_id,
      replica_id,
      availability_mode,
      failover_mode,
      primary_role_allow_connections,
      secondary_role_allow_connections,
      LEN(ISNULL(read_only_routing_url, '')) as read_only_routing_url_length,
      seeding_mode,
      session_timeout
      from sys.availability_replicas WITH(nolock) where group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,0,0,b'\xf9OCvm\x94\x028',b'\x89^\x8ab{\x7fr\xc2',1,,,
39,"
      select
      case
      when (listener_id IS NOT NULL) then 1
      else 0
      end AS [listener_used]
      from sys.availability_group_listeners WITH(nolock) where group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,0,0,b'i\xd4K\x06~\xb2)\xa2',b'\xdc\xa4\xfd}RR\xef\x03',1,,,
40,"
      select
      group_id,
      automated_backup_preference AS [BackupPreference],
      failure_condition_level,
      health_check_timeout,
      dtc_support,
      db_failover,
      is_distributed,
      required_synchronized_secondaries_to_commit,
      cluster_type,
      sequence_number
      from sys.availability_groups where group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)
    ",0,0,0,"b'\x98\x82\x84\xd0\xc2v\x9d,'",b'\xa0\xa4\x8e\xe2\xeb\x98\x87L',1,,,
41,"
      select COUNT_BIG(*) AS [NumReplicaPerAG]
      from sys.dm_hadr_availability_replica_states where group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1) group by group_id
    ",0,0,0,b'\x0c%\xf4\xd7d\x90\x92\x7f',b'\x0e\xc8\xfa(\x8a)\x1a\xbf',1,,,
42,"
      select COUNT_BIG(*) AS [NumDBperAG] from sys.dm_hadr_database_replica_states where group_id in
      (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1) and is_local = 1 group by group_id
    ",0,0,0,b'\x04X\x90R05\xca/',b'\xa3\xf3\xbc1\xaf\xc9f\x05',1,,,
43,"
      select COUNT_BIG(*) as [NumAGinServer] from sys.availability_groups WITH(nolock)
    ",0,1,1,b'\xfb\xbeS$\xd9\x1a\x9c\xb9',b'\x0e\x0b4\xca\xfd\xb9\xb9E',1,,,
44,"
      select COUNT_BIG(distinct audit_action_name) AS ServerAuditActionCount
      from sys.server_audit_specification_details WITH(nolock)
    ",0,1,1,b'\x1fF*O]\xe8s\xa7',"b""\xf2\xbe^\x10[}\x0f'""",1,,,
45,"
      select
      type_desc,
      on_failure_desc,
      queue_delay,
      is_state_enabled
      from sys.server_audits WITH(nolock)
    ",0,0,0,"b""\x9f\xb4''\xd5\xf8\x98\r""",b'!\xd4\xd0\r\xa6S\xe1\x0c',1,,,
46,"
      SELECT
      cpu_count AS LogicalCPUCount,
      hyperthread_ratio AS HyperthreadRatio,
      physical_memory_kb/1024.0 AS PhysicalMemoryMB,
      CONVERT(VARCHAR(20), sqlserver_start_time,  120) AS SQLServerStartTime,
      affinity_type_desc AS AffinityTypeDesc,
      virtual_machine_type AS VirtualMachineType,
      socket_count as SocketCount,
      cores_per_socket as CoresPerSocket,
      numa_node_count as NumaNodeCount,
      container_type as ContainerType,
      container_type_desc as ContainerDescription
      FROM sys.dm_os_sys_info WITH(nolock)
    ",0,1,1,"b'\tF\x11\xe1\x8c,\x82\x89'",b'\xbcA\xc3sz\xf6c\xea',1,,,
47,(@1 tinyint)SELECT COUNT_BIG(*) [number_of_forwarders] FROM [sys].[service_broker_endpoints] WITH(nolock)  WHERE [is_message_forwarding_enabled]=@1,0,1,1,b'&\x81\xbb\xb16\xaf\xfe\x95',b'|W\x9e\x922\x1d\xaa\xf3',1,,,
48,"
      SELECT COUNT_BIG(*) AS SBConnections FROM sys.dm_broker_connections WITH(nolock)
    ",0,1,1,b'\xdeb\xd3\xdd\xa2\x8f7%',b'\x85v8\x921\x84\x8af',1,,,
49,"
      SELECT protocol AS [sProtocolId], COUNT_BIG(*) AS [sNumProtocols] FROM master.sys.endpoints WITH(nolock) GROUP BY protocol
    ",0,4,4,"b""{'\x0e[\xa5\xa25\x8b""",b'\\+\x08\x85\x01V\xcb\xa0',1,,,
50,"
      DECLARE @i bigint
      SET @i = (SELECT CASE WHEN occurrence = 0 THEN NULL ELSE occurrence END FROM sys.dm_exec_query_optimizer_info WITH(nolock) WHERE counter = N'optimizations')

      SELECT
      MAX(CASE counter WHEN N'trivial plan' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracTrivPlan],
      MAX(CASE counter WHEN N'search 0' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch0],
      MAX(CASE counter WHEN N'search 1' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch1],
      MAX(CASE counter WHEN N'search 2' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch2],
      MAX(CASE counter WHEN N'timeout' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracTimeout],
      MAX(CASE counter WHEN N'memory limit exceeded' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracMemLimit],
      MAX(CASE counter WHEN N'search 0 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch0time],
      MAX(CASE counter WHEN N'search 1 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch1time],
      MAX(CASE counter WHEN N'search 2 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch2time],
      MAX(CASE counter WHEN N'search 0 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch0tasks],
      MAX(CASE counter WHEN N'search 1 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch1tasks],
      MAX(CASE counter WHEN N'search 2 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch2tasks],
      MAX(CASE counter WHEN N'gain stage 0 to stage 1' THEN CONVERT(INT, IsNull(value,0) * 1000) END) AS [SqlQOAvgStage1gain],
      MAX(CASE counter WHEN N'gain stage 1 to stage 2' THEN CONVERT(INT, IsNull(value,0) * 1000) END) AS [SqlQOAvgStage2gain]
      FROM sys.dm_exec_query_optimizer_info WITH(nolock)
    ",0,1,1,b'\x89\x9aM\x1bQK\x19\xdd',b'Z\x93\xcb\\*\xac\x973',1,,,
51,"
      DECLARE @i bigint
      SET @i = (SELECT CASE WHEN occurrence = 0 THEN NULL ELSE occurrence END FROM sys.dm_exec_query_optimizer_info WITH(nolock) WHERE counter = N'optimizations')

      SELECT
      MAX(CASE counter WHEN N'trivial plan' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracTrivPlan],
      MAX(CASE counter WHEN N'search 0' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch0],
      MAX(CASE counter WHEN N'search 1' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch1],
      MAX(CASE counter WHEN N'search 2' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracSearch2],
      MAX(CASE counter WHEN N'timeout' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracTimeout],
      MAX(CASE counter WHEN N'memory limit exceeded' THEN CONVERT(INT, 100000000 * (occurrence * 1.0) / @i) END) AS [SqlQOFracMemLimit],
      MAX(CASE counter WHEN N'search 0 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch0time],
      MAX(CASE counter WHEN N'search 1 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch1time],
      MAX(CASE counter WHEN N'search 2 time' THEN CONVERT(INT, IsNull(value,0) * 10000) END) AS [SqlQOAvgSearch2time],
      MAX(CASE counter WHEN N'search 0 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch0tasks],
      MAX(CASE counter WHEN N'search 1 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch1tasks],
      MAX(CASE counter WHEN N'search 2 tasks' THEN CONVERT(INT, IsNull(value,0)) END) AS [SqlQOAvgSearch2tasks],
      MAX(CASE counter WHEN N'gain stage 0 to stage 1' THEN CONVERT(INT, IsNull(value,0) * 1000) END) AS [SqlQOAvgStage1gain],
      MAX(CASE counter WHEN N'gain stage 1 to stage 2' THEN CONVERT(INT, IsNull(value,0) * 1000) END) AS [SqlQOAvgStage2gain]
      FROM sys.dm_exec_query_optimizer_info WITH(nolock)
    ",0,1,1,b'f{O\xb92WO\xe7',b'\x83GW\xcb\xd2\xe8\xd0\xc8',1,,,
52,"
      -- In the following query, the corresponding database ID, symmetric database encryption key algorithm, TDE state, and database encryption key encryptor type are collected.
      SELECT database_id, key_algorithm, key_length, encryption_state, encryptor_type, COUNT_BIG(*) AS key_count FROM sys.dm_database_encryption_keys WITH(nolock) GROUP BY database_id, key_algorithm, key_length, encryption_state, encryptor_type
    ",1,0,0,"b'.dkN\x8fp,\x04'","b'\xc7""\xbfgpAO#'",1,,,
53,"
      --In the following query, the certificate certificate key length, and the certificate encryption type for TDE are collected.
      SELECT key_length, pvt_key_encryption_type, COUNT_BIG(*) AS cert_count FROM sys.certificates WITH(nolock) GROUP BY key_length, pvt_key_encryption_type
    ",0,1,1,b'\x9cb\xc4\xb2\xdb\xeeYU',b'm\xa4(#\xd7\xc0m\x93',1,,,
54,"
      -- In the following query, the EKM provider type (cryptographic provider or not) and the asymmetric key algorithm for TDE are collected.
      SELECT provider_type, algorithm_desc, COUNT_BIG(*) AS key_count FROM sys.asymmetric_keys WITH(nolock) GROUP BY provider_type, algorithm_desc
    ",1,0,0,b'}\xcf\x1c+\xaf\xc2Z\xc9',b'\xd6o\x91=S\xab\xca7',1,,,
55,select COUNT_BIG(*) AS ReadOnlyRoutingRuleCount from sys.availability_read_only_routing_lists WITH(nolock),1,1,1,b'\x83\xed|\x0f\xc9\xb1\xae\xe1',b'\xe6^\xa6\xab\x8a\xc8\x9eP',1,,,
56,"SELECT database_id, type, SUM(CAST(size AS BIGINT))*8 as DatabaseSize FROM sys.master_files WITH(nolock) GROUP BY database_id, type",0,10,10,b'\xdaNZ$3\xd7\x9e\x14',b'\xb3_\x81\x8c\xe5\xc6\x1f7',1,,,
57,"
      SELECT COUNT_BIG(*) AS TempDbDataFileCount FROM sys.master_files WITH(nolock) WHERE database_id = 2 AND [type] = 0
    ",0,1,1,b'\xca^\xb8\xd9\xfd\xa61\xd5',b'!\xdb\xf4\x19\xdc\xbb\x82\xa8',1,,,
58,"
      SELECT
      database_id,
      source_database_id AS SDID,
      create_date,
      compatibility_level,
      user_access,
      is_read_only,
      is_auto_close_on,
      is_auto_shrink_on,
      state,
      is_in_standby,
      is_cleanly_shutdown,
      is_supplemental_logging_enabled AS SLE,
      recovery_model,
      page_verify_option,
      is_auto_create_stats_on AS ACS,
      is_auto_create_stats_incremental_on AS ACSI,
      is_auto_update_stats_on AS AUS,
      is_auto_update_stats_async_on AUSA,
      is_fulltext_enabled AS FTE,
      is_trustworthy_on AS TW,
      is_db_chaining_on AS DBC,
      is_parameterization_forced AS PF,
      is_master_key_encrypted_by_server AS MKEBS,
      is_query_store_on AS QS,
      is_published AS TREPL,
      is_merge_published AS MREPL,
      is_distributor,
      is_sync_with_backup AS SWB,
      is_broker_enabled AS BE,
      log_reuse_wait,
      is_cdc_enabled AS CDC,
      is_encrypted,
      is_honor_broker_priority_on AS HBP,
      replica_id AS RID,
      group_database_id AS GDID,
      resource_pool_id AS RPID,
      containment,
      target_recovery_time_in_seconds AS TRT,
      delayed_durability,
      is_memory_optimized_elevate_to_snapshot_on AS MOES,
      is_remote_data_archive_enabled AS RDAE,
      collation_name AS DBCollation
      FROM sys.databases WITH(nolock)
    ",0,5,5,b'\xc3\xa4\xda-F\x96\xf6\x8c',b'_\x1d\xbd\xf7\xda\xe7o\n',1,,,
59,"
      SELECT cntr_value AS SqlServerMemory FROM sys.dm_os_performance_counters WITH(nolock) WHERE object_name = 'SQLServer:Memory Manager' AND counter_name = 'Total Server Memory (KB)'
    ",1,0,0,"b'2\xcb\xe4s\xe6,j\xaf'",b'\xef\xc3\x1e\x136s\x8e\x06',1,,,
60,"
      SELECT replica_id, group_id, is_local, role, operational_state, recovery_health, synchronization_health, connected_state, last_connect_error_number, last_connect_error_timestamp FROM sys.dm_hadr_availability_replica_states WITH(nolock)
    ",0,0,0,b'Ym\xc8.\xcbu\x15i',b'\xbd\xc8l\x19\xb0\xed\th',1,,,
61,"
      Select
      operation_type,
      total_operation_count
      from sys.dm_column_encryption_enclave_operation_stats WITH(nolock)
    ",0,0,0,b'\x10\xd0D\xe1\x85\xf2\x16\xaf',b'Zp\xb9\xaf\xb6?^?',1,,,
62,"
      Select
      current_enclave_session_count,
      current_column_encryption_key_count,
      current_memory_size_kb,
      total_evicted_session_count
      from sys.dm_column_encryption_enclave WITH(nolock)
    ",1,0,0,b'\xad\xff\xdewD\xe4\xa3\x06',b'N\xd43\x85E\xb8\r/',1,,,
63,"
      SELECT
      value_name,
      value_data
      FROM sys.dm_server_registry WITH(nolock)
      WHERE value_name = 'InstallId'
      OR (registry_key LIKE '%Polybase%' AND value_name = 'ScaleOutReady')
    ",0,1,1,"b""l'\xe1\x8e\xe0\x9e9\xd8""",b'\xc6\xed\xde\xb0;\xb3\x95t',1,,,
64,"
      SELECT startup_type, status
      FROM sys.dm_server_services WITH(nolock)
      WHERE servicename LIKE 'SQL Server Agent (%'
    ",1,1,1,b'_$\xc1\x96\xa6\x01U/',"b'|U<\x7f:\x18\x9f""'",1,,,
65,"
      SELECT database_id, database_guid,
      CASE
      WHEN db_name(database_id) LIKE '%WideWorldImportersDW%' THEN 'WideWorldImportersDW'
      WHEN db_name(database_id) LIKE '%WideWorldImporters%' THEN 'WideWorldImporters'
      WHEN db_name(database_id) LIKE '%AdventureWorks2016CTP3%' THEN 'AdventureWorks2016CTP3'
      WHEN db_name(database_id) LIKE '%AdventureWorksDW2016CTP3%' THEN 'AdventureWorksDW2016CTP3'
      WHEN db_name(database_id) LIKE '%AdventureWorks2014%' THEN 'AdventureWorks2014'
      WHEN db_name(database_id) LIKE '%AdventureWorksDW2014%' THEN 'AdventureWorksDW2014'
      WHEN db_name(database_id) LIKE '%AdventureWorks2012%' THEN 'AdventureWorks2012'
      WHEN db_name(database_id) LIKE '%AdventureWorksDW2012%' THEN 'AdventureWorksDW2012'
      WHEN db_name(database_id) LIKE '%AdventureWorks2008%' THEN 'AdventureWorks2008'
      WHEN db_name(database_id) LIKE '%AdventureWorksDW2008%' THEN 'AdventureWorksDW2008'
      WHEN db_name(database_id) LIKE '%AdventureWorksDW%' THEN 'AdventureWorksDW'
      WHEN db_name(database_id) LIKE '%AdventureWorks%' THEN 'AdventureWorks'
      WHEN db_name(database_id) LIKE '%ReportServerTempDB%' THEN 'ReportServerTempDB'
      WHEN db_name(database_id) LIKE '%ReportServer%' THEN 'ReportServer'
      WHEN db_name(database_id) LIKE '%WSS_Content%' THEN 'WSS_Content'
      WHEN db_name(database_id) LIKE '%MDW%' THEN 'MDW'
      WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX_baseline%' THEN 'MicrosoftDynamicsAX_baseline'
      WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX%' THEN 'MicrosoftDynamicsAX'
      WHEN db_name(database_id) = 'master' THEN 'master'
      WHEN db_name(database_id) = 'msdb' THEN 'msdb'
      WHEN db_name(database_id) = 'tempdb' THEN 'tempdb'
      WHEN db_name(database_id) = 'model' THEN 'model'
      WHEN db_name(database_id) LIKE '%SharePoint_Config%' THEN 'SharePoint_Config'
      WHEN db_name(database_id) LIKE '%SharePoint_AdminContent%' THEN 'SharePoint_AdminContent'
      WHEN db_name(database_id) LIKE '%AppManagement%' THEN 'AppManagement'
      WHEN db_name(database_id) LIKE '%Bdc_Service_DB%' THEN 'Bdc_Service_DB'
      WHEN db_name(database_id) LIKE '%Search_Service_Application_DB%' THEN 'Search_Service_Application_DB'
      WHEN db_name(database_id) LIKE '%Search_Service_Application_AnalyticsReportingStoreDB%' THEN 'Search_Service_Application_AnalyticsReportingStoreDB'
      WHEN db_name(database_id) LIKE '%Search_Service_Application_CrawlStoreDB%' THEN 'Search_Service_Application_CrawlStoreDB'
      WHEN db_name(database_id) LIKE '%Search_Service_Application_LinkStoreDB%' THEN 'Search_Service_Application_LinkStoreDB'
      WHEN db_name(database_id) LIKE '%Secure_Store_Service_DB%' THEN 'Secure_Store_Service_DB'
      WHEN db_name(database_id) LIKE '%SharePoint_Logging%' THEN 'SharePoint_Logging'
      WHEN db_name(database_id) LIKE '%SettingsServiceDB%' THEN 'SettingsServiceDB'
      WHEN db_name(database_id) LIKE '%User Profile Service Application_ProfileDB%' THEN 'User Profile Service Application_ProfileDB'
      WHEN db_name(database_id) LIKE '%User Profile Service Application_SyncDB%' THEN 'User Profile Service Application_SyncDB'
      WHEN db_name(database_id) LIKE '%User Profile Service Application_SocialDB%' THEN 'User Profile Service Application_SocialDB'
      WHEN db_name(database_id) LIKE '%WordAutomationServices%' THEN 'WordAutomationServices'
      WHEN db_name(database_id) LIKE '%Managed Metadata Service Application_Metadata%' THEN 'Managed Metadata Service Application_Metadata'
      WHEN db_name(database_id) LIKE '%SharePoint Translation Services%' THEN 'SharePoint Translation Services'
      WHEN db_name(database_id) LIKE '%ProjectWebApp%' THEN 'ProjectWebApp'
      WHEN db_name(database_id) LIKE '%DefaultPowerPivotServiceApplicationDB%' THEN 'DefaultPowerPivotServiceApplicationDB'
      WHEN db_name(database_id) LIKE '%PerformancePoint Service%' THEN 'PerformancePoint Service'
      WHEN db_name(database_id) LIKE '%SessionStateService%' THEN 'SessionStateService'
      WHEN db_name(database_id) = 'SSISDB' THEN 'SSISDB'
      WHEN db_name(database_id) = 'DQS_MAIN' THEN 'DQS_MAIN'
      ELSE 'Other'
      END AS default_database_class
      FROM sys.database_recovery_status WITH(nolock)
    ",60,5,5,b'U`\x1a\x1c\xe0\x84\xcey',b'_\xb6\xb5\x9eO|\xcbc',1,,,
66,"
      DECLARE @ConfigDefault TABLE (
      Name NVARCHAR(35) PRIMARY KEY,
      DefaultValue SQL_VARIANT
      );

INSERT INTO @ConfigDefault (Name, DefaultValue)
VALUES ('access check cache bucket count', 0)
    ,('access check cache quota', 0)
    ,('Ad Hoc Distributed Queries', 0)
    ,('affinity I/O mask', 0)
    ,('affinity mask', 0)
    ,('affinity64 I/O mask', 0)
    ,('affinity64 mask', 0)
    ,('Agent XPs', 0)
    ,('allow filesystem enumeration', 1)
    ,('allow polybase export', 0)
    ,('allow updates', 0)
    ,('automatic soft-NUMA disabled', 0)
    ,('backup checksum default', 0)
    ,('backup compression default', 0)
    ,('blocked process threshold (s)', 0)
    ,('c2 audit mode', 0)
    ,('clr enabled', 0)
    ,('clr strict security', 1)
    ,('column encryption enclave type', 0)
    ,('common criteria compliance enabled', 0)
    ,('contained database authentication', 0)
    ,('cost threshold for parallelism', 5)
    ,('cross db ownership chaining', 0)
    ,('cursor threshold', -1)
    ,('Database Mail XPs', 0)
    ,('default full-text language', 1033)
    ,('default language', 0)
    ,('default trace enabled', 1)
    ,('disallow results from triggers', 0)
    ,('EKM provider enabled', 0)
    ,('external scripts enabled', 0)
    ,('filestream access level', 0)
    ,('fill factor (%)', 0)
    ,('ft crawl bandwidth (max)', 100)
    ,('ft crawl bandwidth (min)', 0)
    ,('ft notify bandwidth (max)', 100)
    ,('ft notify bandwidth (min)', 0)
    ,('hadoop connectivity', 0)
    ,('index create memory (KB)', 0)
    ,('in-doubt xact resolution', 0)
    ,('lightweight pooling', 0)
    ,('locks', 0)
    ,('max degree of parallelism', 0)
    ,('max full-text crawl range', 4)
    ,('max server memory (MB)', 2147483647)
    ,('max text repl size (B)', 65536)
    ,('max worker threads', 0)
    ,('media retention', 0)
    ,('min memory per query (KB)', 1024)
    ,('min server memory (MB)', 0)
    ,('nested triggers', 1)
    ,('network packet size (B)', 4096)
    ,('Ole Automation Procedures', 0)
    ,('open objects', 0)
    ,('optimize for ad hoc workloads', 0)
    ,('PH timeout (s)', 60)
    ,('polybase enabled', 0)
    ,('polybase network encryption', 1)
    ,('precompute rank', 0)
    ,('priority boost', 0)
    ,('query governor cost limit', 0)
    ,('query wait (s)', -1)
    ,('recovery interval (min)', 0)
    ,('remote access', 1)
    ,('remote admin connections', 0)
    ,('remote data archive', 0)
    ,('remote login timeout (s)', 10)
    ,('remote proc trans', 0)
    ,('remote query timeout (s)', 600)
    ,('Replication XPs', 0)
    ,('scan for startup procs', 0)
    ,('server trigger recursion', 1)
    ,('set working set size', 0)
    ,('show advanced options', 0)
    ,('SMO and DMO XPs', 1)
    ,('tempdb metadata memory-optimized', 0)
    ,('transform noise words', 0)
    ,('two digit year cutoff', 2049)
    ,('user connections', 0)
    ,('user options', 0)
    ,('xp_cmdshell', 0);

SELECT
      c.name ConfigName,
      c.value ValueSet,
      c.value_in_use ValueInUse,
      d.DefaultValue DefaultValue
FROM sys.configurations c WITH(nolock)
      INNER JOIN @ConfigDefault d ON c.name = d.Name
WHERE
      c.value != c.value_in_use
      OR c.value_in_use != d.DefaultValue;
    ",1,1,1,b'\x95\x14O;\xeb\xf0\xf2\x8d',b'\x7f\x14b2\x94\rY\x10',1,,,
67,"
      DECLARE @ConfigDefault TABLE (
      Name NVARCHAR(35) PRIMARY KEY,
      DefaultValue SQL_VARIANT
      );

INSERT INTO @ConfigDefault (Name, DefaultValue)
VALUES ('access check cache bucket count', 0)
    ,('access check cache quota', 0)
    ,('Ad Hoc Distributed Queries', 0)
    ,('affinity I/O mask', 0)
    ,('affinity mask', 0)
    ,('affinity64 I/O mask', 0)
    ,('affinity64 mask', 0)
    ,('Agent XPs', 0)
    ,('allow filesystem enumeration', 1)
    ,('allow polybase export', 0)
    ,('allow updates', 0)
    ,('automatic soft-NUMA disabled', 0)
    ,('backup checksum default', 0)
    ,('backup compression default', 0)
    ,('blocked process threshold (s)', 0)
    ,('c2 audit mode', 0)
    ,('clr enabled', 0)
    ,('clr strict security', 1)
    ,('column encryption enclave type', 0)
    ,('common criteria compliance enabled', 0)
    ,('contained database authentication', 0)
    ,('cost threshold for parallelism', 5)
    ,('cross db ownership chaining', 0)
    ,('cursor threshold', -1)
    ,('Database Mail XPs', 0)
    ,('default full-text language', 1033)
    ,('default language', 0)
    ,('default trace enabled', 1)
    ,('disallow results from triggers', 0)
    ,('EKM provider enabled', 0)
    ,('external scripts enabled', 0)
    ,('filestream access level', 0)
    ,('fill factor (%)', 0)
    ,('ft crawl bandwidth (max)', 100)
    ,('ft crawl bandwidth (min)', 0)
    ,('ft notify bandwidth (max)', 100)
    ,('ft notify bandwidth (min)', 0)
    ,('hadoop connectivity', 0)
    ,('index create memory (KB)', 0)
    ,('in-doubt xact resolution', 0)
    ,('lightweight pooling', 0)
    ,('locks', 0)
    ,('max degree of parallelism', 0)
    ,('max full-text crawl range', 4)
    ,('max server memory (MB)', 2147483647)
    ,('max text repl size (B)', 65536)
    ,('max worker threads', 0)
    ,('media retention', 0)
    ,('min memory per query (KB)', 1024)
    ,('min server memory (MB)', 0)
    ,('nested triggers', 1)
    ,('network packet size (B)', 4096)
    ,('Ole Automation Procedures', 0)
    ,('open objects', 0)
    ,('optimize for ad hoc workloads', 0)
    ,('PH timeout (s)', 60)
    ,('polybase enabled', 0)
    ,('polybase network encryption', 1)
    ,('precompute rank', 0)
    ,('priority boost', 0)
    ,('query governor cost limit', 0)
    ,('query wait (s)', -1)
    ,('recovery interval (min)', 0)
    ,('remote access', 1)
    ,('remote admin connections', 0)
    ,('remote data archive', 0)
    ,('remote login timeout (s)', 10)
    ,('remote proc trans', 0)
    ,('remote query timeout (s)', 600)
    ,('Replication XPs', 0)
    ,('scan for startup procs', 0)
    ,('server trigger recursion', 1)
    ,('set working set size', 0)
    ,('show advanced options', 0)
    ,('SMO and DMO XPs', 1)
    ,('tempdb metadata memory-optimized', 0)
    ,('transform noise words', 0)
    ,('two digit year cutoff', 2049)
    ,('user connections', 0)
    ,('user options', 0)
    ,('xp_cmdshell', 0);

SELECT
      c.name ConfigName,
      c.value ValueSet,
      c.value_in_use ValueInUse,
      d.DefaultValue DefaultValue
FROM sys.configurations c WITH(nolock)
      INNER JOIN @ConfigDefault d ON c.name = d.Name
WHERE
      c.value != c.value_in_use
      OR c.value_in_use != d.DefaultValue;
    ",0,81,81,b'\xb0\x1d\xc7\xc1\xb6\x9b!\xbe',b'+\x7f\xf8\xeaA\x91\x9a*',1,,,
68,"(@1 varchar(8000))SELECT [name],[value] FROM [sys].[extended_properties] WHERE [name]=@1",4,0,0,b'+\xa8\x1d\xfa]B\xda\x17',b'\xd1\x19\xe5\x1f[z\xdaD',1,,,
